// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package ganrac

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:5
type yySymType struct {
	yys  int
	node pNode
	num  int
}

const call = 57346
const list = 57347
const initvar = 57348
const f_time = 57349
const name = 57350
const ident = 57351
const vardol = 57352
const number = 57353
const f_true = 57354
const f_false = 57355
const t_str = 57356
const all = 57357
const ex = 57358
const and = 57359
const or = 57360
const not = 57361
const abs = 57362
const plus = 57363
const minus = 57364
const comma = 57365
const mult = 57366
const div = 57367
const pow = 57368
const ltop = 57369
const gtop = 57370
const leop = 57371
const geop = 57372
const neop = 57373
const eqop = 57374
const assign = 57375
const eol = 57376
const lb = 57377
const rb = 57378
const lp = 57379
const rp = 57380
const unaryminus = 57381
const unaryplus = 57382

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"call",
	"list",
	"initvar",
	"f_time",
	"name",
	"ident",
	"vardol",
	"number",
	"f_true",
	"f_false",
	"t_str",
	"all",
	"ex",
	"and",
	"or",
	"not",
	"abs",
	"plus",
	"minus",
	"comma",
	"mult",
	"div",
	"pow",
	"ltop",
	"gtop",
	"leop",
	"geop",
	"neop",
	"eqop",
	"assign",
	"eol",
	"lb",
	"rb",
	"lp",
	"rp",
	"unaryminus",
	"unaryplus",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:88
/*  start  of  programs  */

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 295

var yyAct = [...]int{
	43, 3, 38, 21, 22, 35, 23, 24, 25, 34,
	25, 74, 33, 36, 75, 39, 40, 32, 60, 32,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 1, 19, 20, 66, 64,
	21, 22, 59, 23, 24, 25, 26, 27, 28, 29,
	31, 30, 16, 71, 32, 0, 0, 72, 0, 0,
	41, 19, 20, 70, 66, 21, 22, 73, 23, 24,
	25, 26, 27, 28, 29, 31, 30, 65, 69, 32,
	19, 20, 63, 0, 21, 22, 0, 23, 24, 25,
	26, 27, 28, 29, 31, 30, 61, 0, 32, 67,
	13, 37, 10, 11, 6, 8, 9, 7, 0, 0,
	0, 0, 0, 0, 15, 14, 0, 5, 13, 4,
	10, 11, 6, 8, 9, 7, 0, 0, 17, 0,
	12, 62, 15, 14, 0, 0, 23, 24, 25, 0,
	0, 0, 0, 0, 0, 2, 17, 32, 12, 19,
	20, 0, 0, 21, 22, 0, 23, 24, 25, 26,
	27, 28, 29, 31, 30, 0, 68, 32, 13, 37,
	10, 11, 6, 8, 9, 7, 0, 0, 0, 0,
	0, 0, 15, 14, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 17, 42, 12, 19,
	20, 0, 0, 21, 22, 0, 23, 24, 25, 26,
	27, 28, 29, 31, 30, 0, 18, 32, 19, 20,
	0, 0, 21, 22, 0, 23, 24, 25, 26, 27,
	28, 29, 31, 30, 0, 0, 32, 13, 37, 10,
	11, 6, 8, 9, 7, 0, 0, 0, 0, 0,
	0, 15, 14, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 17, 0, 12, 21, 22,
	0, 23, 24, 25, 26, 27, 28, 29, 31, 30,
	21, 22, 32, 23, 24, 25, 26, 27, 28, 29,
	31, 30, 0, 0, 32,
}

var yyPact = [...]int{
	111, -1000, -1000, 182, -21, -28, -1000, -1000, -1000, -1000,
	-32, -1000, 230, -35, 230, 230, -1000, 161, -1000, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 9, 93, 44, -1000, 230, -16,
	-16, 41, -1000, 201, 259, 247, 112, 112, -16, -16,
	-16, -18, -18, -18, -18, -18, -18, 63, 132, 40,
	-1000, 15, -1000, -1000, 19, -1000, 230, -1000, -1000, -23,
	5, -1000, -1000, 201, -1000, -1000,
}

var yyPgo = [...]int{
	0, 60, 52, 42, 0, 35,
}

var yyR1 = [...]int{
	0, 5, 5, 5, 5, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 2, 2, 1, 1, 3, 3,
}

var yyR2 = [...]int{
	0, 1, 2, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 1, 4, 3, 2, 1, 3, 1, 3,
}

var yyChk = [...]int{
	-1000, -5, 34, -4, 8, 6, 11, 14, 12, 13,
	9, 10, 37, 7, 22, 21, -2, 35, 34, 17,
	18, 21, 22, 24, 25, 26, 27, 28, 29, 30,
	32, 31, 35, 33, 37, 37, -4, 8, 37, -4,
	-4, -1, 36, -4, -4, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, -4, -4, -4, -3,
	9, -1, 38, 38, -4, 36, 23, 36, 34, 38,
	23, 38, 38, -4, 34, 9,
}

var yyDef = [...]int{
	0, -2, 1, 0, 10, 0, 5, 6, 7, 8,
	9, 11, 0, 0, 0, 0, 31, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 10, 0, 23,
	24, 0, 34, 35, 12, 13, 18, 19, 20, 21,
	22, 25, 26, 27, 28, 29, 30, 0, 0, 0,
	37, 0, 17, 14, 0, 33, 0, 32, 3, 0,
	0, 15, 16, 36, 4, 38,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:35
		{
			yylex.(*pLexer).push(newPNode("", eol, 0, yyDollar[1].node.pos))
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:36
		{
			yylex.(*pLexer).trace("gege")
		}
	case 3:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:37
		{
			yylex.(*pLexer).trace("assign")
			yylex.(*pLexer).push(newPNode(yyDollar[1].node.str, assign, 0, yyDollar[1].node.pos))
		}
	case 4:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:38
		{
			yylex.(*pLexer).trace("init")
			yylex.(*pLexer).push(newPNode(yyDollar[1].node.str, initvar, yyDollar[3].num, yyDollar[1].node.pos))
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:42
		{
			yylex.(*pLexer).trace("poly.num: " + yyDollar[1].node.str)
			yylex.(*pLexer).push(yyDollar[1].node)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:43
		{
			yylex.(*pLexer).trace("string")
			yylex.(*pLexer).push(yyDollar[1].node)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:44
		{
			yylex.(*pLexer).trace("true")
			yylex.(*pLexer).push(yyDollar[1].node)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:45
		{
			yylex.(*pLexer).trace("false")
			yylex.(*pLexer).push(yyDollar[1].node)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:46
		{
			yylex.(*pLexer).trace("ident: " + yyDollar[1].node.str)
			yylex.(*pLexer).push(yyDollar[1].node)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:47
		{
			yylex.(*pLexer).trace("name: " + yyDollar[1].node.str)
			yylex.(*pLexer).push(yyDollar[1].node)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:48
		{
			yylex.(*pLexer).trace("vardol: " + yyDollar[1].node.str)
			yylex.(*pLexer).push(yyDollar[1].node)
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:49
		{
			yylex.(*pLexer).trace("and")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:50
		{
			yylex.(*pLexer).trace("or")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:51
		{
			yyVAL.node = yyDollar[2].node
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:52
		{
			yylex.(*pLexer).trace("call")
			yylex.(*pLexer).push(newPNode(yyDollar[1].node.str, call, yyDollar[3].num, yyDollar[1].node.pos))
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:53
		{
			yylex.(*pLexer).trace("time")
			yylex.(*pLexer).push(newPNode(yyDollar[1].node.str, f_time, f_time, yyDollar[1].node.pos))
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:54
		{
			yylex.(*pLexer).trace("call")
			yylex.(*pLexer).push(newPNode(yyDollar[1].node.str, call, 0, yyDollar[1].node.pos))
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:55
		{
			yylex.(*pLexer).trace("+")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:56
		{
			yylex.(*pLexer).trace("-")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:57
		{
			yylex.(*pLexer).trace("*")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:58
		{
			yylex.(*pLexer).trace("/")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:59
		{
			yylex.(*pLexer).trace("^")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:60
		{
			yylex.(*pLexer).trace("-")
			yylex.(*pLexer).push(newPNode("-.", unaryminus, 0, yyDollar[1].node.pos))
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:61
		{
			yylex.(*pLexer).trace("+.")
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:62
		{
			yylex.(*pLexer).trace("<")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:63
		{
			yylex.(*pLexer).trace(">")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:64
		{
			yylex.(*pLexer).trace("<=")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:65
		{
			yylex.(*pLexer).trace(">=")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:66
		{
			yylex.(*pLexer).trace("==")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:67
		{
			yylex.(*pLexer).trace("!=")
			yylex.(*pLexer).push(yyDollar[2].node)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:68
		{
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:69
		{
			yylex.(*pLexer).trace("=")
			yylex.(*pLexer).push(newPNode("[]", lb, 0, yyDollar[1].node.pos))
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:73
		{
			yylex.(*pLexer).trace("list" + string(yyDollar[2].num))
			yylex.(*pLexer).push(newPNode("_list", list, yyDollar[2].num, yyDollar[1].node.pos))
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:74
		{
			yylex.(*pLexer).trace("list0")
			yylex.(*pLexer).push(newPNode("_list", list, 0, yyDollar[1].node.pos))
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:78
		{
			yyVAL.num = 1
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:79
		{
			yyVAL.num = yyDollar[1].num + 1
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:83
		{
			yyVAL.num = 1
			yylex.(*pLexer).push(newPNode(yyDollar[1].node.str, ident, 0, yyDollar[1].node.pos))
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:84
		{
			yyVAL.num = yyDollar[1].num + 1
			yylex.(*pLexer).push(newPNode(yyDollar[3].node.str, ident, 0, yyDollar[3].node.pos))
		}
	}
	goto yystack /* stack new state and value */
}
