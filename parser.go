// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package ganrac

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:5
type yySymType struct {
	yys  int
	node pNode
	num  int
}

const call = 57346
const list = 57347
const initvar = 57348
const name = 57349
const ident = 57350
const number = 57351
const f_true = 57352
const f_false = 57353
const all = 57354
const ex = 57355
const and = 57356
const or = 57357
const not = 57358
const abs = 57359
const plus = 57360
const minus = 57361
const comma = 57362
const mult = 57363
const div = 57364
const pow = 57365
const ltop = 57366
const gtop = 57367
const leop = 57368
const geop = 57369
const neop = 57370
const eqop = 57371
const assign = 57372
const eol = 57373
const lb = 57374
const rb = 57375
const lp = 57376
const rp = 57377
const lc = 57378
const rc = 57379
const unaryminus = 57380
const unaryplus = 57381

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"call",
	"list",
	"initvar",
	"name",
	"ident",
	"number",
	"f_true",
	"f_false",
	"all",
	"ex",
	"and",
	"or",
	"not",
	"abs",
	"plus",
	"minus",
	"comma",
	"mult",
	"div",
	"pow",
	"ltop",
	"gtop",
	"leop",
	"geop",
	"neop",
	"eqop",
	"assign",
	"eol",
	"lb",
	"rb",
	"lp",
	"rp",
	"lc",
	"rc",
	"unaryminus",
	"unaryplus",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:108
/*  start  of  programs  */

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 163

var yyAct = [...]int{
	43, 2, 5, 27, 28, 33, 29, 30, 31, 32,
	67, 17, 18, 35, 31, 38, 40, 19, 20, 44,
	63, 66, 46, 46, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 19, 70, 69, 62, 41,
	27, 28, 64, 29, 30, 31, 21, 22, 23, 24,
	26, 25, 68, 19, 20, 37, 11, 63, 7, 36,
	6, 11, 15, 16, 72, 13, 12, 71, 60, 66,
	13, 12, 1, 61, 9, 7, 36, 6, 11, 15,
	16, 39, 65, 59, 14, 42, 10, 13, 12, 29,
	30, 31, 7, 3, 6, 11, 15, 16, 8, 0,
	0, 14, 0, 10, 13, 12, 0, 0, 0, 0,
	36, 37, 11, 15, 16, 0, 0, 0, 14, 0,
	10, 13, 12, 27, 28, 0, 29, 30, 31, 21,
	22, 23, 24, 26, 25, 27, 28, 10, 29, 30,
	31, 4, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 47,
}

var yyPact = [...]int{
	86, -1000, -20, -18, 39, 105, -25, -29, -1000, -1000,
	103, -1000, 47, 47, 52, -1000, -1000, -1000, 69, 103,
	103, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 60, 69, 3, 22, -1000, -1000, -9, 47,
	-9, 49, -1000, -1000, -21, -1000, 105, 21, 117, 117,
	117, 117, 117, 117, 68, 68, -9, -9, -9, 17,
	-1000, 1, -1000, -1000, -15, -1000, 69, -1000, -1000, 56,
	-1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 39, 98, 83, 141, 74, 0, 2, 72,
}

var yyR1 = [...]int{
	0, 8, 8, 6, 6, 6, 6, 6, 4, 4,
	4, 4, 4, 2, 2, 1, 1, 3, 3, 5,
	5, 5, 5, 5, 5, 5, 5, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7,
}

var yyR2 = [...]int{
	0, 2, 4, 1, 1, 4, 4, 1, 1, 3,
	3, 3, 1, 3, 2, 1, 3, 1, 3, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	3, 3, 3, 3, 3, 2, 2,
}

var yyChk = [...]int{
	-1000, -8, -6, 7, -4, -7, 8, 6, -2, -5,
	34, 9, 19, 18, 32, 10, 11, 31, 30, 14,
	15, 24, 25, 26, 27, 29, 28, 18, 19, 21,
	22, 23, 34, 34, -4, -7, 7, 8, -7, 34,
	-7, -1, 33, -6, -6, -4, -7, -4, -7, -7,
	-7, -7, -7, -7, -7, -7, -7, -7, -7, -3,
	8, -1, 35, 35, -7, 33, 20, 31, 35, 20,
	35, -6, 8,
}

var yyDef = [...]int{
	0, -2, 0, 12, 3, 4, 29, 0, 7, 8,
	0, 28, 0, 0, 0, 19, 20, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 12, 29, 35, 0,
	36, 0, 14, 15, 0, 9, 0, 10, 21, 22,
	23, 24, 25, 26, 30, 31, 32, 33, 34, 0,
	17, 0, 11, 27, 0, 13, 0, 2, 5, 0,
	6, 16, 18,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:35
		{
			{
				yyytrace("gege")
			}
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:36
		{
			yyytrace("assign")
			stack.Push(yyDollar[2].node)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:41
		{
			{
				yyytrace("mobj: poly:" + string(stack.Len()))
			}
		}
	case 5:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:42
		{
			yyytrace("call")
			stack.Push(newPNode(yyDollar[1].node.str, call, yyDollar[3].num, yyDollar[1].node.pos))
		}
	case 6:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:43
		{
			yyytrace("init")
			stack.Push(newPNode(yyDollar[1].node.str, initvar, yyDollar[3].num, yyDollar[1].node.pos))
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:44
		{
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:49
		{
			yyytrace("and")
			stack.Push(yyDollar[2].node)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:50
		{
			yyytrace("or")
			stack.Push(yyDollar[2].node)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:51
		{
			yyVAL.node = yyDollar[2].node
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:52
		{
			yyytrace("name: " + yyDollar[1].node.str)
			stack.Push(yyDollar[1].node)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:57
		{
			yyytrace("list" + string(yyDollar[2].num))
			stack.Push(newPNode("_list", list, yyDollar[2].num, yyDollar[1].node.pos))
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:58
		{
			yyytrace("list0")
			stack.Push(newPNode("_list", list, 0, yyDollar[1].node.pos))
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:62
		{
			yyVAL.num = 1
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:63
		{
			yyVAL.num = yyDollar[1].num + 1
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:67
		{
			yyVAL.num = 1
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:68
		{
			yyVAL.num = yyDollar[1].num + 1
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:72
		{
			yyytrace("true")
			stack.Push(yyDollar[1].node)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:73
		{
			yyytrace("false")
			stack.Push(yyDollar[1].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:74
		{
			yyytrace("<")
			stack.Push(yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:75
		{
			yyytrace(">")
			stack.Push(yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:76
		{
			yyytrace("<=")
			stack.Push(yyDollar[2].node)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:77
		{
			yyytrace(">=")
			stack.Push(yyDollar[2].node)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:78
		{
			yyytrace("==")
			stack.Push(yyDollar[2].node)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:79
		{
			yyytrace("!=")
			stack.Push(yyDollar[2].node)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:96
		{
			yyVAL.node = yyDollar[2].node
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:97
		{
			yyytrace("poly.num: " + yyDollar[1].node.str)
			stack.Push(yyDollar[1].node)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:98
		{
			yyytrace("ident: " + yyDollar[1].node.str)
			stack.Push(yyDollar[1].node)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:99
		{
			yyytrace("+")
			stack.Push(yyDollar[2].node)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:100
		{
			yyytrace("-")
			stack.Push(yyDollar[2].node)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:101
		{
			yyytrace("*")
			stack.Push(yyDollar[2].node)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:102
		{
			yyytrace("/")
			stack.Push(yyDollar[2].node)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:103
		{
			yyytrace("^")
			stack.Push(yyDollar[2].node)
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:104
		{
			yyytrace("-")
			stack.Push(newPNode("-.", unaryminus, 0, yyDollar[1].node.pos))
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:105
		{
			yyytrace("+")
			stack.Push(newPNode("+.", unaryplus, 0, yyDollar[1].node.pos))
		}
	}
	goto yystack /* stack new state and value */
}
